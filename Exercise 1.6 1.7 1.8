Exercise 1.6 :
a)	Creating program – Compile a Java Program – Loading a program into memory – Bytecode Verification – Execute
b)	Integrated development environment (IDEs)
c)	Java Virtual Machine (JVM)
d)	Virtual Machine (VM)
e)	JVM’s class loader
f)	Bytecode verifer

Exercise 1.7 :
a.	Explain the two compilation phases of Java programs.
a) In the 1st phase, the source code(filename.java) is translated into bytecodes(using the java compiler with the javac +filename.java command )
b)In the second phase, during execution, the JVM is invoked using the java command accompanied by the filename(seems like without the extension) this translates the bytecodes into machine language for the actual computer on which the code executes.

Exercise 1.8 :
a.	You’re probably wearing on your wrist one of the world’s most common types of objects— a watch. Discuss how each of the following terms and concepts applies to the notion of a watch: object, attributes, behaviors, class, inheritance (consider, for example, an alarm clock), abstraction, modeling, messages, encapsulation, interface and information hiding.
a)Object :- A watch is constituted of different part which together join to give us a view of what the time at a given moment is. It is only when these parts are combined together that you can have what is called a watch . The individual components are usually design and as it is in most cases, this will begin in the form of engineering drawings or blueprints Depending on whether we will use a mechanical or an electronic watch, we will have to make different design for the power source location, the watch casing, the hands, the watch protection. The main thing the user ever check out from the watch is the position of its hands to read time. The rest of the watch's functioning is encapsulated within its casing and these complex mechanisms are kept away from the user of the watch. All this is done such that people who has little or no knowledge on watch mechanisms have no problem in using watches. The same analogy shall then follow that just as you cannot sleep in the blueprint of a bed, you cannot also read time from the engineering drawings of a watch. Before you can read time from a watch, it must have been constructed from its engineering drawings or design plans.
b)Attributes:- Apart from being able to read time, a watch has attributes such as its color, its constituent material(for example, quartz, steel), its power source(mechanical, solar, electronic) , extra properties such as water resistant, its size, its ability to keep track of the date and month. Also , like its capabilities, The watch's attributes are represent part of its design in its engineering diagrams (for example, a watch which functions on solar energy will include solar panels/cells) and as you will use a watch, its given attributes will be carried along with it (the watch). Every watch will maintain its own attributes . For example, each watch keeps track of time according to how it was set up, but a given watch does not know the time in another watch except if these watches were synchronized to keep an identical record of time. In a nutshell , each watch has for example its hand reading attributes which represent the time in that watch but not the time in other watches.
c)Behaviors:- Considering the fact that behavior and method are similar terms. Hence behaviors house the way(s) in which the watch performs its tasks. For example, for a mechanical watch the behavior/method hides the hand and wheel movement mechanisms from the user of the watch.
d)Class:- A class is used to house/embody a set of methods that aid it(the class) in performing the class's tasks.A class can be seen as the blueprints or in the case of our watch , the engineering drawings/design plan from which our watch object is created. It will hence contain methods enabling us to read time, change time and so on.
e)Inheritance:- With inheritance, we can possibly from an existing class(parent class), create a new class(child class). The new class absorbs the characteristics of the existing class and possibly add extra and unique characteristics of its own to these inherited characteristics. Our alarm clock may contain the general watch characteristics such as the hands and the timing parameters but at the same time it may have a extra customized alarm device which emits very loud sounds and contains volume control. At the same time, the alarm clock may not contain the band which most wrist watches contain.
f)Abstraction:- Abstraction is a feature which enables us to easily conceptualize a real world object by removing excess/unnecessary details of the object. If we take a wrist watch , a pendulum clock, an alarm clock and a mechanical watch and remove a given set of features from each of these different categories of watches, we will come to obtain the general set of features that define each and every watch. You can get quite a practical explanation of abstraction from this web page Object Oriented Programming Abstraction ,
g)Modeling:- Modeling has to do with making a representation of something , typically on a smaller scale. With respect to this definition, coming up with the engineering drawings for a watch should represent modeling.
h)Messages:- When you want to calibrate an analogue watch(I see calibration as a method hence the act of calibrating my watch is a method call), rotating the crown sends a message to the minute hand of the watch to rotate and hence move from a given minute to another, consequent movements of the minute hand also cause the hour hand to move and hence, the time reading of the watch changes. The message I sent , which was that I wanted to change time was implemented as a method call on the calibration method.
i)Encapsulation:- I will take the case in which I am trying to calibrate my watch from the time readings of another watch. Both watches are objects by calibrating one watch from the reading of another, I am bringing about some form of communication between both watches. One may be able to calibrate one watch from another, but that doesn't mean he will be able to understand the implementation details of the watch. This is because the implementation details of each watch are hidden within the watch in a phenomenon which is similar to encapsulation(i.e. wrapping up attributes and methods into objects).
